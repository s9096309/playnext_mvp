# tests/test_helpers.py

import uuid
from datetime import datetime, date, timedelta, UTC
from typing import Optional, Tuple

from sqlalchemy.orm import Session

from app.database import crud, user_crud, models, schemas
from app.utils.auth import create_access_token, get_password_hash, ACCESS_TOKEN_EXPIRE_MINUTES



def create_test_user(db: Session, username: str = None, email: str = None,
                     password: str = "password", is_admin: bool = False) -> Tuple[models.User, str]:
    """
    Helper function to create a test user and generate an access token for them.
    Returns the created User model instance and their access token.
    """
    # Generate unique username and email if not provided
    unique_suffix = uuid.uuid4().hex[:8]
    if username is None:
        username = f"testuser_{unique_suffix}"
    if email is None:
        email = f"test_{unique_suffix}@example.com"

    # Create UserCreateDB schema for database insertion
    user_create_db = schemas.UserCreateDB(
        username=username,
        email=email,
        hashed_password=get_password_hash(password),
        registration_date=datetime.now(UTC).replace(tzinfo=None),
        user_age=25,
        is_admin=is_admin
    )

    # Create the user in the database
    user = user_crud.create_user(db=db, user=user_create_db)
    db.refresh(user) # Refresh the user object to get the user_id generated by the database

    # Generate an access token for the newly created user
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username},
        expires_delta=access_token_expires
    )

    print(f"Generated token for user {user.username}: {access_token[:20]}... (length {len(access_token)})")

    return user, access_token


def create_test_game(db: Session, game_name: str = None, genre: str = "Action",
                     release_date: date = date(2023, 1, 1), platform: str = "PC",
                     igdb_id: Optional[int] = None, image_url: Optional[str] = None,
                     age_rating: Optional[str] = None) -> models.Game:
    """
    Helper function to create a test game in the database.
    Returns the created Game model instance.
    """
    if igdb_id is None:
        igdb_id = uuid.uuid4().int % (10**9) # Generate a random unique ID
    if game_name is None:
        game_name = f"Test Game {uuid.uuid4().hex[:8]}" # Make game_name unique

    # Ensure image_url has a default if not provided
    if image_url is None:
        image_url = f"http://example.com/game_images/{igdb_id}.jpg"

    game_data = schemas.GameCreate(
        game_name=game_name,
        genre=genre,
        release_date=release_date,
        platform=platform,
        igdb_id=igdb_id,
        image_url=image_url,
        age_rating=age_rating
    )
    game = crud.create_game(db=db, game=game_data)
    db.refresh(game)
    return game
