AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  PlayNextFastAPI
  SAM Template for a FastAPI application deployed to AWS Lambda and API Gateway..

Parameters:
  # IGDB Credentials (Ensure these are replaced with your actual values during deployment)
  IgdbClientId:
    Type: String
    NoEcho: 'true'
    Description: IGDB Client ID
  IgdbClientSecret:
    Type: String
    NoEcho: 'true'
    Description: IGDB Client Secret
  IgdbAppAccessToken:
    Type: String
    NoEcho: 'true'
    Description: IGDB App Access Token

  # Database Credentials (RDS/Postgres)
  DbUser:
    Type: String
    Description: Database Username
  DbPassword:
    Type: String
    NoEcho: 'true' # Prevents the password from being displayed in logs
    Description: Database Password
  DbHost:
    Type: String
    Description: Database Endpoint Host
  DbPort:
    Type: String
    Default: '5432'
    Description: Database Port
  DbName:
    Type: String
    Description: Database Name

  # Application Secrets (Used for FastAPI/Other Services)
  AppClientId:
    Type: String
    NoEcho: 'true'
    Description: Application Client ID
  AppClientSecret:
    Type: String
    NoEcho: 'true'
    Description: Application Client Secret
  AppSecretKey:
    Type: String
    NoEcho: 'true'
    Description: Application Secret Key
  GeminiApiKey:
    Type: String
    NoEcho: 'true'
    Description: Gemini API Key

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.12
    CodeUri: .
    Handler: app.main.handler

Resources:
  PlayNextFastAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: playnext-api-function-sam
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref PlayNextApiGateway
      Environment:
        Variables:
          # IGDB Variables
          IGDB_CLIENT_ID: !Ref IgdbClientId
          IGDB_CLIENT_SECRET: !Ref IgdbClientSecret
          IGDB_APP_ACCESS_TOKEN: !Ref IgdbAppAccessToken

          # Database Variables
          # We use !Sub to construct the connection URL dynamically using the parameters
          DATABASE_URL: !Sub "postgresql+psycopg2://${DbUser}:${DbPassword}@${DbHost}:${DbPort}/${DbName}"
          DB_USER: !Ref DbUser
          DB_PASS: !Ref DbPassword
          DB_HOST: !Ref DbHost
          DB_PORT: !Ref DbPort
          DB_NAME: !Ref DbName

          # Client and Secret Keys
          CLIENT_ID: !Ref AppClientId
          CLIENT_SECRET: !Ref AppClientSecret
          SECRET_KEY: !Ref AppSecretKey
          GEMINI_API_KEY: !Ref GeminiApiKey

          # Postgres (parameterized versions of redundant variables)
          POSTGRES_DB: !Ref DbName
          POSTGRES_USER: !Ref DbUser
          POSTGRES_PASSWORD: !Ref DbPassword

      VpcConfig:
          SecurityGroupIds:
            # Use the ID of your default security group
            - sg-06bd4c46f330d5146
          SubnetIds:
            # Use the IDs of your default subnets
            - subnet-0da3a4ceca8b7c89b
            - subnet-00eac2700c52df303
            - subnet-01cc94ff74c986422

  PlayNextApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: !Sub '${AWS::StackName}-API'

        # Binary Media Types for API Gateway
        x-amazon-apigateway-binary-media-types:
          - '*/*'

        # Gateway Responses for API Gateway
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            statusCode: 400
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {"message": "$context.error.message", "type": "$context.error.responseType"}
          DEFAULT_5XX:
            statusCode: 500
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
              gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {"message": "$context.error.message", "type": "$context.error.responseType"}

        # CORS configuration for API Gateway
        x-amazon-apigateway-cors:
          allowOrigins:
            - '*'
          allowHeaders:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
          allowMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          allowCredentials: true

        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST # This is correct for proxy integration
                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PlayNextFastAPIFunction.Arn}/invocations'
                passthroughBehavior: WHEN_NO_MATCH

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Dev stage"
    Value: !Sub "https://${PlayNextApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/"